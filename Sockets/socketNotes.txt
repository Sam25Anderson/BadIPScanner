Server Side Socket Configuration

1. Create Socket

int sockfd = socket(domain, type, protocol)
sockfd: socket descriptor, an integer (like a file handle)
domain: integer, specifies communication domain. We use AF_ LOCAL as defined in the POSIX standard for communication between processes on the same host. For communicating between processes on different hosts connected by IPV4, we use AF_INET and AF_I NET 6 for processes connected by IPV6.
type: communication type (SOCK_STREAM: TCP(reliable, connection-oriented) or SOCK_DGRAM: UDP(unreliable, connectionless))
protocol: Protocol value for Internet Protocol(IP), which is 0. This is the same number that appears on the protocol field in the IP header of a packet.(man protocols for more details)\

2. Set socket options
int setsockopt(int sockfd, int level, int optname,  const void *optval, socklen_t optlen);

3. Bind socket --- Hold connection to other port
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

4. Set to listening
int listen(int sockfd, int backlog);

5. Accept requests
int new_socket= accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);


Client Side Socket Configuration

1. Socket connection
Same as server side socket creation

2. Connect
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);







